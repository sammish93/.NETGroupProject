Please DON'T delete the TestController.cs, DbOrmTestClassContext.cs, TestProgram.cs, or the DbOrmTestClass.cs files. We can clean these up at a later date when we are more comfortable.

TestProgram.cs is commented out so that ProgramUserAccount can run. 


After trying many solutions I found the first half of this video the most useful: https://www.youtube.com/watch?v=2p01iafOxUw
I also used chapter 20 in the pensum which gives several options on how to communicate with the database.
I watched this video: https://www.youtube.com/watch?v=SryQxUeChMc and spent a good deal of time trying to make it work with migrations and the 'Add-Migration' command. 
This isn't too useful for us who have a small database, but apparently is preferable for larger databases as you can automatically change database columns just by changing
a field in a class. It also tracks changes in a separate table.


I managed to connect to our remote database through dependency injection using Microsoft.EntityFrameworkCore.Tools, .Design, and .SqlServer packages I downloaded
via NuGet. It's important that you check that the specific project you're using has all of these packages enabled. To do this:
- Right click on desired project and select 'Manage NuGet Packages'.
- Click on the 'Installed' tab and check that the desired packages are there (in this case, the ones I listed above)
	- If not, click on the browse tab, search for them, and install them. Accept the agreement popups.

It's also important to check that the models and classes you want to use from the ClassLibrary project are available. If you can't seem to access them through intellisense then:
- Right click on project -> 'Add' -> 'Project Reference' -> check the boxes of the projects you want to add. In this case, I added only ClassLibrary. Microservices shouldn't
be dependent or tightly coupled on other services. The case of having a class library is different, as long as they are just class definitions.

Finally, this method only works as long as we manually create a table using a SQL command, eg CREATE TABLE schemaName.tableName ( col1 int, col2 varchar(255) ); 
You can do this in the server explorer window once you're connected to the database by right clicking on the database and selecting 'New Query'.
If you can't connect to the database then click on this link https://www.google.com/search?q=what%27s+my+ip and send your public IP to me (Sam) on the discord so I can create
a firewall exception for you on Azure. You'll have to do this on every IP you connect through.


Username and password for testing in LoginController:

username: stian
password: abc123




